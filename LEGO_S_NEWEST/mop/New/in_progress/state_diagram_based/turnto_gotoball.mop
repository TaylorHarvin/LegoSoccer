// Base State LTL
// Events pulled from the StateCheck class in collaboration with RoboStateMachine.aj
// Also based directly off of the state diagram to ensure proper transitions
// -----------------------------------------------------------------------------------
// FROM: Goto ball state to turn to ball state


//package mop;

import java.io.*;
import java.util.*;
import fullSoccer.*;
import stateTools.*;
import loggingTools.*;
import lejos.utility.Delay;

test(Kicker MK) { 
	Kicker currMK;	// Reference to kicker for the ltl violation
	boolean failTried = false;
	
	
	//**************************TURN_TO_BALL****************************************************************
	// Turn-To-Ball state check from StateCheck -- when the state enters in Turn-To-Ball
	event turnto_ball_state_enter before(Kicker MK):
		call(public boolean Kicker.turnToBall()) && this(MK){
			System.out.println("Turn_To_Ball Event ENTER");
			//StateCheck.PrintState(State.TURN_TO_BALL);
			//StateCheck.GetState(ChangeEvent.IR_MOD, MK);
			//StateCheck.WonderState(currMK);
			Logger.log(LogFile.TURN_GTB,"turnto_ball_state_enter");
		}
	
	
	// Turn-To-Ball state check from StateCheck -- when the state is in Turn-To-Ball
	event turnto_ball_state_true after(Kicker MK) returning (boolean TurnCheckRes):
		call(public boolean StateCheck.TurnToBallState(Kicker)) && condition(TurnCheckRes) &&  !execution(State StateCheck.GetState(ChangeEvent, Kicker)) && args(MK){
			System.out.println("TURN_TO_BALL Event TEST TRUE");
			Logger.log(LogFile.TURN_GTB,"turnto_ball_state_true");
		}
	
	
	

	//************************************************************************************************	
	
	
	//**************************GOTO BALL*************************************************************
	// Goto ball state check from StateCheck -- BEFORE
	event gotoballstate_enter before(Kicker MK):
		call(public boolean Kicker.gotoBall()) && this(MK){
			System.out.println("GTB Event ENTER");
			//StateCheck.GetState(ChangeEvent.IR_MOD, MK);
			//StateCheck.PrintState(State.GOTO_BALL);
			Logger.log(LogFile.TURN_GTB,"gotoballstate_enter");
		}
	
	// Goto ball state is true -- but it is tied with a method in StateCheck (rather than Kicker)
	// Ball must be in front, robot must be moving and the ball must not be close
	// NOTE: Goto ball enterence does not equate to this due to the fact that the robot
	// hasn't started the goto proceedure until after the before event -- !!!Add new state later!!!
	event goto_ball_state_true after(Kicker MK) returning (boolean gtbCheckRes):
		call(public boolean StateCheck.GotoBallState(Kicker)) && condition(gtbCheckRes) && !execution(State StateCheck.GetState(ChangeEvent, Kicker)) && args(MK){
			System.out.println("GTB Event TEST TRUE");
			Logger.log(LogFile.TURN_GTB,"goto_ball_state_true");
		}

	
	
	//************************************************************************************************	
	

	// Basic ball in front -- if true
	// NOTE: this is now tied to a secondary method called in RoboStateMachine.aj
	event ballinfront_true after(Kicker MK):
		call(public void Kicker.generateBallInFrontState()) && target(MK)/*set(boolean StateCheck.bifStateGen)*/{
			currMK = MK;
			System.out.println("Ball in front TRUE");
			Logger.log(LogFile.TURN_GTB,"ballinfront_true");
		}
		
	

	//ltl: turnto_ball_state_true => ((turnto_ball_state_true U turnto_ball_state_exit_true) => o ballinfront_true)
	//ltl: turnto_ball_state_true => (turnto_ball_state_true U ballinfront_true and o gotoballstate_enter)
	ltl: turnto_ball_state_enter => o (turnto_ball_state_true U ballinfront_true and o gotoballstate_enter)
			
	
	@violation {
		System.out.println("!!!TURN TO GTB FAIL!!!");
		Logger.log(LogFile.TURN_GTB,"!!!TURN_TO_BALL TO GTB FAIL!!!");
		Delay.msDelay(5000);
		__RESET;
	}
}

